// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static int heapBase; // I wanted to declare a const/symbolic naming for this address
    static int heapSize;

    static Array ram;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null

        let ram = 0;
        let heapBase = 2048;
        let heapSize = 14335;

        let freeList = 2048;
        let freeList[0] = 14335;
        let freeList[1] = null;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;

        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.

        var Array previous, current;

        let current = freeList;
        if ((current[0]) < (size + 1)) {
            let previous = current;
            let current = previous[1]; // we assume here there is more than one node in the freeList

            while (true) {
                if ((current[0]) < (size + 1)) {
                    let previous = current;
                    let current = current[1];
                }
                else {
                    if (current[0] = (size + 1)) {
                        let previous[1] = current[1];

                        return current + 1;
                    }
                    else {
                        if (current[0] > (size + 2)) {
                            let current[0] = ((current[0]) - size) - 1;
                            let current = current + (current[0]);
                            let current[0] = size + 1;

                            return current + 1;
                        }
                        let previous = current;
                        let current = current[1];
                    }
                }

            }
        }


        // let freeList = freeList + size + 1;
        // let freeList[0] = current[0] - size;
        // let freeList[1] = current[1];

        let freeList[0] = ((freeList[0]) - size) - 1;
        let current = freeList + (freeList[0]);
        let current[0] = size + 1;

        return current + 1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeList
        var Array current, segment;

        let segment = o - 1;
        let current = freeList;

        while (~(current[1] = 0)) {
            let current = current[1];
        }

        // let current[0] = o;
        // let o[1] = 0;
        let current[1] = segment;
        let segment[1] = 0;

        return;
    }    

    /** Returns the maximal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.

        return o[0];
    }
}
