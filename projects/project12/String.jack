// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array string_;
    field int length_, capacity_;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            // let string_ = null;
            let capacity_ = 0;
            let length_ = 0;
        }
        else {
            let string_ = Array.new(maxLength);
            let capacity_ = maxLength;
            let length_ = 0;
        }

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (capacity_ > 0) {
            do string_.dispose();
        }

        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length_;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return string_[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let string_[j] = c;

        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let string_[length_] = c;
        let length_ = length_ + 1;

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length_ = length_ - 1;
        let string_[length_] = 0;    // todo - maybe set as null? or not set at all (ignore)?

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.length()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val
        var int i, aggregated_value;

        if (length_ < 1) {
            return 0;
        }

        if (string_[0] = 45) {
            return -intValueHelper(1, 0);
        }

        let i = 0;
        let aggregated_value = 0;

        return intValueHelper(0, 0);
    }

    method int intValueHelper(int current_index, int aggregated_value) {
        var int current_char, added_value;

        if (current_index = length_) {
            return aggregated_value;
        }

        let current_char = string_[current_index];
        if ((current_char < 48) | (current_char > 57)) {
            return aggregated_value;
        }

        let added_value = current_char - 48;
        let aggregated_value = (aggregated_value * 10) + added_value;

        return intValueHelper(current_index + 1, aggregated_value);
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)
        let length_ = 0;

        if (val < -9) {
            let val = -val;
            do appendChar(45);
            do setIntHelper(val);

            return;
        }
        if ((val < 0)) {
            let val = -val;
            do appendChar(45);
            do appendChar(val - 48);

            return;
        }
        if (val < 10) {
            do appendChar(val - 48);

            return;
        }

        do setIntHelper(val);
        return;
    }

    method void setIntHelper(int val) {
        var int tmp;

        let tmp = val / 10;
        if (tmp = 0) {
            do appendChar(val + 48);

            return;
        }

        do setIntHelper(val / 10);
        let tmp = tmp * 10;
        let tmp = val - tmp;
        do appendChar(tmp + 48);

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
