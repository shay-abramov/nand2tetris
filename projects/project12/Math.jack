// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
        static int divideRemainder;
	static Array bitArray;

        /** Initializes the library. */
        function void init() {

            let bitArray = Array.new(16);
            let bitArray[0] = 1;
            let bitArray[1] = 2; // 2**1
            let bitArray[2] = 4; // 2**2
            let bitArray[3] = 8; // 2**3
            let bitArray[4] = 16; // 2**4
            let bitArray[5] = 32; // 2**5
            let bitArray[6] = 64; // 2**6
            let bitArray[7] = 128; // 2**7
            let bitArray[8] = 256; // 2**8
            let bitArray[9] = 512; // 2**9
            let bitArray[10] = 1024; // 2**10
            let bitArray[11] = 2048; // 2**11
            let bitArray[12] = 4096; // 2**12
            let bitArray[13] = 8192; // 2**13
            let bitArray[14] = 16384; // 2**14
            let bitArray[15] = 16384 + 16384; // 2**15
            return;
        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
            if (x < 0) {
                return -x;
            }

            return x;
        }

        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx
            // 7. return sum

            var int sign, result;

            if (((x < 0) & (y < 0)) | ((x > 0) & (y > 0))) {
                let sign = 1;
            } else {
                let sign = -1;
            }

            let x = Math.abs(x);
            let y = Math.abs(y);

            let result = Math.multiplyHelper(x, y);

            if (sign = 1) {
                return result;
            }

            return -result;
        }

        function int multiplyHelper(int x, int y) {
            var int sum, shiftedx;

            let sum = 0;
            let shiftedx = x;

            while (y > 0) {
                if ((y & 1) = 1) {
                    let sum = sum + shiftedx;
                }

                let shiftedx = ^shiftedx;
                let y = #y;
            }

            return sum;
        }

        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1

            var int sign, result;

            if (((x < 0) & (y < 0)) | ((x > 0) & (y > 0))) {
                let sign = 1;
            } else {
                let sign = -1;
            }
            let x = Math.abs(x);
            let y = Math.abs(y);

            let divideRemainder = x;
            let result = Math.divideHelper(x, y);

            if (sign = 1) {
                return result;
            }

            return -result;
        }

        function int divideHelper(int x, int y) {
            var int q, tmp;

            if ((y > x) | (y < 0)) {
                return 0;
            }

            let tmp = ^y;           // equivalent to Math.multiply(y, 2)
            let q = Math.divideHelper(x, tmp);
            if (divideRemainder < y) {
                return (^q);
            }
            
           let divideRemainder = divideRemainder - y;
           return (^q) + 1;
        }

        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // This should be implemented without using multiplication or division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y
            
            var int y, j, temp, tempSquare;

            if (x < 0) {
                do Sys.error(4);
                return 0;
            }
    
            let y = 0;
            let j = 7;
    
            while (~(j < 0)) {
                let temp = y + bitArray[j];
                let tempSquare = temp * temp;
    
                if (~(tempSquare > x) & (tempSquare > 0)) {
                    let y = temp;
                }
                let j = j - 1;
            }
            return y;
        }

        /** Returns the greater number. */
        function int max(int a, int b) {
            if (a < b) {
                return b;
            }

            return a;
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
            if (a < b) {
                return a;
            }

            return b;
        }
}
