// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
        static int divideRemainder;
	static Array bitArray;

        /** Initializes the library. */
        function void init() {

            let bitArray = Array.new(16);
            let bitArray[0] = 1;
            let bitArray[1] = 2;
            let bitArray[2] = 4;
            let bitArray[3] = 8;
            let bitArray[4] = 16;
            let bitArray[5] = 32;
            let bitArray[6] = 64;
            let bitArray[7] = 128;
            let bitArray[8] = 256;
            let bitArray[9] = 512;
            let bitArray[10] = 1024;
            let bitArray[11] = 2048;
            let bitArray[12] = 4096;
            let bitArray[13] = 8192;
            let bitArray[14] = 16384;
            let bitArray[15] = 16384 + 16384;
            return;
        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
            if (x < 0) {
                return -x;
            }

            return x;
        }

        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx
            // 7. return sum

            var int sign, result;

            if (((x < 0) & (y < 0)) | ((x > 0) & (y > 0))) {
                let sign = 1;
            } else {
                let sign = -1;
            }

            let x = Math.abs(x);
            let y = Math.abs(y);

            let result = Math.multiplyHelper(x, y);

            if (sign = 1) {
                return result;
            }

            return -result;
        }

        function int multiplyHelper(int x, int y) {
            var int sum, shiftedx;

            let sum = 0;
            let shiftedx = x;

            while (y > 0) {
                if ((y & 1) = 1) {
                    let sum = sum + shiftedx;
                }

                let shiftedx = ^shiftedx;
                let y = #y;
            }

            return sum;
        }

        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1

            var int sign, result;

            if (((x < 0) & (y < 0)) | ((x > 0) & (y > 0))) {
                let sign = 1;
            } else {
                let sign = -1;
            }
            let x = Math.abs(x);
            let y = Math.abs(y);

            let divideRemainder = x;
            let result = Math.divideHelper(x, y);

            if (sign = 1) {
                return result;
            }

            return -result;
        }

        function int divideHelper(int x, int y) {
            var int q, tmp;

            if ((y > x) | (y < 0)) {
                return 0;
            }

            let tmp = ^y;           // equivalent to Math.multiply(y, 2)
            let q = Math.divideHelper(x, tmp);
            if (divideRemainder < y) {
                return (^q);
            }
            
           let divideRemainder = divideRemainder - y;
           return (^q) + 1;
        }

        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // sqrt in O(1).

            if (x > 32760) {
                return 181;
            }
            if (x > 32399) {
                return 180;
            }
            if (x > 32040) {
                return 179;
            }
            if (x > 31683) {
                return 178;
            }
            if (x > 31328) {
                return 177;
            }
            if (x > 30975) {
                return 176;
            }
            if (x > 30624) {
                return 175;
            }
            if (x > 30275) {
                return 174;
            }
            if (x > 29928) {
                return 173;
            }
            if (x > 29583) {
                return 172;
            }
            if (x > 29240) {
                return 171;
            }
            if (x > 28899) {
                return 170;
            }
            if (x > 28560) {
                return 169;
            }
            if (x > 28223) {
                return 168;
            }
            if (x > 27888) {
                return 167;
            }
            if (x > 27555) {
                return 166;
            }
            if (x > 27224) {
                return 165;
            }
            if (x > 26895) {
                return 164;
            }
            if (x > 26568) {
                return 163;
            }
            if (x > 26243) {
                return 162;
            }
            if (x > 25920) {
                return 161;
            }
            if (x > 25599) {
                return 160;
            }
            if (x > 25280) {
                return 159;
            }
            if (x > 24963) {
                return 158;
            }
            if (x > 24648) {
                return 157;
            }
            if (x > 24335) {
                return 156;
            }
            if (x > 24024) {
                return 155;
            }
            if (x > 23715) {
                return 154;
            }
            if (x > 23408) {
                return 153;
            }
            if (x > 23103) {
                return 152;
            }
            if (x > 22800) {
                return 151;
            }
            if (x > 22499) {
                return 150;
            }
            if (x > 22200) {
                return 149;
            }
            if (x > 21903) {
                return 148;
            }
            if (x > 21608) {
                return 147;
            }
            if (x > 21315) {
                return 146;
            }
            if (x > 21024) {
                return 145;
            }
            if (x > 20735) {
                return 144;
            }
            if (x > 20448) {
                return 143;
            }
            if (x > 20163) {
                return 142;
            }
            if (x > 19880) {
                return 141;
            }
            if (x > 19599) {
                return 140;
            }
            if (x > 19320) {
                return 139;
            }
            if (x > 19043) {
                return 138;
            }
            if (x > 18768) {
                return 137;
            }
            if (x > 18495) {
                return 136;
            }
            if (x > 18224) {
                return 135;
            }
            if (x > 17955) {
                return 134;
            }
            if (x > 17688) {
                return 133;
            }
            if (x > 17423) {
                return 132;
            }
            if (x > 17160) {
                return 131;
            }
            if (x > 16899) {
                return 130;
            }
            if (x > 16640) {
                return 129;
            }
            if (x > 16383) {
                return 128;
            }
            if (x > 16128) {
                return 127;
            }
            if (x > 15875) {
                return 126;
            }
            if (x > 15624) {
                return 125;
            }
            if (x > 15375) {
                return 124;
            }
            if (x > 15128) {
                return 123;
            }
            if (x > 14883) {
                return 122;
            }
            if (x > 14640) {
                return 121;
            }
            if (x > 14399) {
                return 120;
            }
            if (x > 14160) {
                return 119;
            }
            if (x > 13923) {
                return 118;
            }
            if (x > 13688) {
                return 117;
            }
            if (x > 13455) {
                return 116;
            }
            if (x > 13224) {
                return 115;
            }
            if (x > 12995) {
                return 114;
            }
            if (x > 12768) {
                return 113;
            }
            if (x > 12543) {
                return 112;
            }
            if (x > 12320) {
                return 111;
            }
            if (x > 12099) {
                return 110;
            }
            if (x > 11880) {
                return 109;
            }
            if (x > 11663) {
                return 108;
            }
            if (x > 11448) {
                return 107;
            }
            if (x > 11235) {
                return 106;
            }
            if (x > 11024) {
                return 105;
            }
            if (x > 10815) {
                return 104;
            }
            if (x > 10608) {
                return 103;
            }
            if (x > 10403) {
                return 102;
            }
            if (x > 10200) {
                return 101;
            }
            if (x > 9999) {
                return 100;
            }
            if (x > 9800) {
                return 99;
            }
            if (x > 9603) {
                return 98;
            }
            if (x > 9408) {
                return 97;
            }
            if (x > 9215) {
                return 96;
            }
            if (x > 9024) {
                return 95;
            }
            if (x > 8835) {
                return 94;
            }
            if (x > 8648) {
                return 93;
            }
            if (x > 8463) {
                return 92;
            }
            if (x > 8280) {
                return 91;
            }
            if (x > 8099) {
                return 90;
            }
            if (x > 7920) {
                return 89;
            }
            if (x > 7743) {
                return 88;
            }
            if (x > 7568) {
                return 87;
            }
            if (x > 7395) {
                return 86;
            }
            if (x > 7224) {
                return 85;
            }
            if (x > 7055) {
                return 84;
            }
            if (x > 6888) {
                return 83;
            }
            if (x > 6723) {
                return 82;
            }
            if (x > 6560) {
                return 81;
            }
            if (x > 6399) {
                return 80;
            }
            if (x > 6240) {
                return 79;
            }
            if (x > 6083) {
                return 78;
            }
            if (x > 5928) {
                return 77;
            }
            if (x > 5775) {
                return 76;
            }
            if (x > 5624) {
                return 75;
            }
            if (x > 5475) {
                return 74;
            }
            if (x > 5328) {
                return 73;
            }
            if (x > 5183) {
                return 72;
            }
            if (x > 5040) {
                return 71;
            }
            if (x > 4899) {
                return 70;
            }
            if (x > 4760) {
                return 69;
            }
            if (x > 4623) {
                return 68;
            }
            if (x > 4488) {
                return 67;
            }
            if (x > 4355) {
                return 66;
            }
            if (x > 4224) {
                return 65;
            }
            if (x > 4095) {
                return 64;
            }
            if (x > 3968) {
                return 63;
            }
            if (x > 3843) {
                return 62;
            }
            if (x > 3720) {
                return 61;
            }
            if (x > 3599) {
                return 60;
            }
            if (x > 3480) {
                return 59;
            }
            if (x > 3363) {
                return 58;
            }
            if (x > 3248) {
                return 57;
            }
            if (x > 3135) {
                return 56;
            }
            if (x > 3024) {
                return 55;
            }
            if (x > 2915) {
                return 54;
            }
            if (x > 2808) {
                return 53;
            }
            if (x > 2703) {
                return 52;
            }
            if (x > 2600) {
                return 51;
            }
            if (x > 2499) {
                return 50;
            }
            if (x > 2400) {
                return 49;
            }
            if (x > 2303) {
                return 48;
            }
            if (x > 2208) {
                return 47;
            }
            if (x > 2115) {
                return 46;
            }
            if (x > 2024) {
                return 45;
            }
            if (x > 1935) {
                return 44;
            }
            if (x > 1848) {
                return 43;
            }
            if (x > 1763) {
                return 42;
            }
            if (x > 1680) {
                return 41;
            }
            if (x > 1599) {
                return 40;
            }
            if (x > 1520) {
                return 39;
            }
            if (x > 1443) {
                return 38;
            }
            if (x > 1368) {
                return 37;
            }
            if (x > 1295) {
                return 36;
            }
            if (x > 1224) {
                return 35;
            }
            if (x > 1155) {
                return 34;
            }
            if (x > 1088) {
                return 33;
            }
            if (x > 1023) {
                return 32;
            }
            if (x > 960) {
                return 31;
            }
            if (x > 899) {
                return 30;
            }
            if (x > 840) {
                return 29;
            }
            if (x > 783) {
                return 28;
            }
            if (x > 728) {
                return 27;
            }
            if (x > 675) {
                return 26;
            }
            if (x > 624) {
                return 25;
            }
            if (x > 575) {
                return 24;
            }
            if (x > 528) {
                return 23;
            }
            if (x > 483) {
                return 22;
            }
            if (x > 440) {
                return 21;
            }
            if (x > 399) {
                return 20;
            }
            if (x > 360) {
                return 19;
            }
            if (x > 323) {
                return 18;
            }
            if (x > 288) {
                return 17;
            }
            if (x > 255) {
                return 16;
            }
            if (x > 224) {
                return 15;
            }
            if (x > 195) {
                return 14;
            }
            if (x > 168) {
                return 13;
            }
            if (x > 143) {
                return 12;
            }
            if (x > 120) {
                return 11;
            }
            if (x > 99) {
                return 10;
            }
            if (x > 80) {
                return 9;
            }
            if (x > 63) {
                return 8;
            }
            if (x > 48) {
                return 7;
            }
            if (x > 35) {
                return 6;
            }
            if (x > 24) {
                return 5;
            }
            if (x > 15) {
                return 4;
            }
            if (x > 8) {
                return 3;
            }
            if (x > 3) {
                return 2;
            }
            if (x > 0) {
                return 1;
            }

            return 0;
        }

        // function int sqrt(int x) {
        // this was my initial sqrt(x) implementation.
        // since it didn't stand in the complexity requirement, I implemented a much more efficient (although a bit dumb)
        // algorithm above.
        // var int y, j, temp, tempSquare;

        //     if (x < 0) {
        //         do Sys.error(4);
        //         return 0;
        //     }
    
        //     let y = 0;
        //     let j = 7;
    
        //     while (~(j < 0)) {
        //         let temp = y + bitArray[j];
        //         let tempSquare = temp * temp;
    
        //         if (~(tempSquare > x) & (tempSquare > 0)) {
        //             let y = temp;
        //         }
        //         let j = j - 1;
        //     }
        //     return y;
        // }

        /** Returns the greater number. */
        function int max(int a, int b) {
            if (a < b) {
                return b;
            }

            return a;
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
            if (a < b) {
                return a;
            }

            return b;
        }
}
