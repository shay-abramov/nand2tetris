// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    DMux	(in=true, sel=instruction[15],			a=ainstruction, b=cinstruction);
    And		(a=cinstruction, b=instruction[3],		out=mout);
    And		(a=cinstruction, b=instruction[4],		out=Dload);
    Not16	(in=instruction,				out=Din);
    DRegister	(in=comp, load=Dload,				out=outD);
    Mux16	(a=Aout, b=inM, sel=instruction[12],		out=outAM);
    ALU		(x=outD, y=outAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=comp, zr=zero, ng=neg);

    Or		(a=ainstruction, b=instruction[5],		out=Aload);
    Mux16	(a=comp, b=instruction, sel=ainstruction,	out=AregisterIn);
    And		(a=mout, b=true,				out=writeM);
    ARegister	(in=AregisterIn, load=Aload,			out[0..14]=addressM, out=Aout);
    PC		(in=Aout, load=jump, reset=reset, inc=true,	out[0..14]=pc);

    Or		(a=zero, b=neg,					out=notpos);
    Not		(in=notpos,					out=pos);
    And		(a=instruction[0], b=pos,			out=j3);
    And		(a=instruction[1], b=zero,			out=j2);
    And		(a=instruction[2], b=neg,			out=j1);
    Or		(a=j1, b=j2,					out=j12);
    Or		(a=j12, b=j3,					out=j123);
    And		(a=j123, b=instruction[15],			out=jump);
}
